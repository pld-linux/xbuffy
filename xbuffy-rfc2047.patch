diff -rNu xbuffy-3.3.bl.3.orig/Makefile.in xbuffy-3.3.bl.3/Makefile.in
--- xbuffy-3.3.bl.3.orig/Makefile.in	Wed Jul  1 12:15:32 1998
+++ xbuffy-3.3.bl.3/Makefile.in	Thu May 15 13:48:59 2003
@@ -23,7 +23,7 @@
 
 LIBDYN = $(srcdir)/libdyn/libdyn.a
 OBJS = xbuffy.o boxfile.o realfrom.o getword.o len_next.o move_left.o \
-       strincmp.o remfirstwd.o header_cmp.o @LIBOBJS@
+       rfc2047_header.o strincmp.o remfirstwd.o header_cmp.o @LIBOBJS@
 DOC = README xbuffy.man boxfile.fmt boxfile.sample
 DEFAULTS = XBuffy.ad
 HDRS = xbuffy.h xbuffy.xbm
diff -rNu xbuffy-3.3.bl.3.orig/rfc2047_header.c xbuffy-3.3.bl.3/rfc2047_header.c
--- xbuffy-3.3.bl.3.orig/rfc2047_header.c	Thu Jan  1 01:00:00 1970
+++ xbuffy-3.3.bl.3/rfc2047_header.c	Thu May 15 14:02:07 2003
@@ -0,0 +1,305 @@
+
+
+
+/*
+ *  a function rfc2047_decode() and all related staff is stolen 
+ *  from mutt 1.4 and hacked a little bit
+ *
+ *  			"Jacek Rembisz" jacek@szuwary.org
+ */
+
+#include <string.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include "xbuffy.h"
+
+/* for toupper, I don't know if it is portable */
+#include <ctype.h>
+
+# define strfcpy(A,B,C) strncpy(A,B,C), *(A+(C)-1)=0
+
+/* Content-Transfer-Encoding */
+enum
+{
+  ENCOTHER,
+  ENC7BIT,
+  ENC8BIT,
+  ENCQUOTEDPRINTABLE,
+  ENCBASE64,
+  ENCBINARY,
+  ENCUUENCODED
+};
+
+static int Index_hex[128] = {
+    -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1,
+    -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1,
+    -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1,
+     0, 1, 2, 3,  4, 5, 6, 7,  8, 9,-1,-1, -1,-1,-1,-1,
+    -1,10,11,12, 13,14,15,-1, -1,-1,-1,-1, -1,-1,-1,-1,
+    -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1,
+    -1,10,11,12, 13,14,15,-1, -1,-1,-1,-1, -1,-1,-1,-1,
+    -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1
+};
+
+static int Index_64[128] = {
+    -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1,
+    -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1,
+    -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,62, -1,-1,-1,63,
+    52,53,54,55, 56,57,58,59, 60,61,-1,-1, -1,-1,-1,-1,
+    -1, 0, 1, 2,  3, 4, 5, 6,  7, 8, 9,10, 11,12,13,14,
+    15,16,17,18, 19,20,21,22, 23,24,25,-1, -1,-1,-1,-1,
+    -1,26,27,28, 29,30,31,32, 33,34,35,36, 37,38,39,40,
+    41,42,43,44, 45,46,47,48, 49,50,51,-1, -1,-1,-1,-1
+};
+
+#define hexval(c) Index_hex[(unsigned int)(c)]
+#define base64val(c) Index_64[(unsigned int)(c)]
+
+static size_t mutt_strlen(const char *a)
+{
+  return a ? strlen (a) : 0;
+}
+
+static void safe_free (void **p)
+{
+  if (*p)
+  {
+    free (*p);				/* __MEM_CHECKED__ */
+    *p = 0;
+  }
+}
+
+
+static void *safe_malloc (size_t siz)
+{
+  void *p;
+
+  if (siz == 0)
+    return 0;
+  if ((p = (void *) malloc (siz)) == 0)	/* __MEM_CHECKED__ */
+  {
+/*
+		mutt_error _("Out of memory!");
+    sleep (1);
+    mutt_exit (1);
+		*/
+		perror("safe_malloc"); exit(1);
+  }
+  return (p);
+}
+
+static int rfc2047_decode_word (char *d, const char *s, size_t len)
+{
+  const char *pp = s, *pp1;
+  char *pd, *d0;
+  const char *t, *t1;
+  int enc = 0, count = 0, c1, c2, c3, c4;
+  char *charset = NULL;
+
+  pd = d0 = safe_malloc (strlen (s));
+
+  for (pp = s; (pp1 = strchr (pp, '?')); pp = pp1 + 1)
+  {
+    count++;
+    switch (count)
+    {
+      case 2:
+	/* ignore language specification a la RFC 2231 */        
+	t = pp1;
+        if ((t1 = memchr (pp, '*', t - pp)))
+	  t = t1;
+	charset = safe_malloc (t - pp + 1);
+	memcpy (charset, pp, t - pp);
+	charset[t-pp] = '\0';
+	break;
+      case 3:
+	if (toupper (*pp) == 'Q')
+	  enc = ENCQUOTEDPRINTABLE;
+	else if (toupper (*pp) == 'B')
+	  enc = ENCBASE64;
+	else
+	{
+	  safe_free ((void **) &charset);
+	  safe_free ((void **) &d0);
+	  return (-1);
+	}
+	break;
+      case 4:
+	if (enc == ENCQUOTEDPRINTABLE)
+	{
+	  while (pp < pp1 && len > 0)
+	  {
+	    if (*pp == '_')
+	    {
+	      *pd++ = ' ';
+	      len--;
+	    }
+	    else if (*pp == '=')
+	    {
+	      if (pp[1] == 0 || pp[2] == 0)
+		break;	/* something wrong */
+	      *pd++ = (hexval(pp[1]) << 4) | hexval(pp[2]);
+	      len--;
+	      pp += 2;
+	    }
+	    else
+	    {
+	      *pd++ = *pp;
+	      len--;
+	    }
+	    pp++;
+	  }
+	  *pd = 0;
+	}
+	else if (enc == ENCBASE64)
+	{
+	  while (pp < pp1 && len > 0)
+	  {
+	    if (pp[0] == '=' || pp[1] == 0 || pp[1] == '=')
+	      break;  /* something wrong */
+	    c1 = base64val(pp[0]);
+	    c2 = base64val(pp[1]);
+	    *pd++ = (c1 << 2) | ((c2 >> 4) & 0x3);
+	    if (--len == 0) break;
+	    
+	    if (pp[2] == 0 || pp[2] == '=') break;
+
+	    c3 = base64val(pp[2]);
+	    *pd++ = ((c2 & 0xf) << 4) | ((c3 >> 2) & 0xf);
+	    if (--len == 0)
+	      break;
+
+	    if (pp[3] == 0 || pp[3] == '=')
+	      break;
+
+	    c4 = base64val(pp[3]);
+	    *pd++ = ((c3 & 0x3) << 6) | c4;
+	    if (--len == 0)
+	      break;
+
+	    pp += 4;
+	  }
+	  *pd = 0;
+	}
+	break;
+    }
+  }
+  
+	/*
+  if (charset)
+    mutt_convert_string (&d0, charset, Charset, M_ICONV_HOOK_FROM);
+	*/
+  strfcpy (d, d0, len);
+  safe_free ((void **) &charset);
+  safe_free ((void **) &d0);
+  return (0);
+}
+
+
+/*
+ * Find the start and end of the first encoded word in the string.
+ * We use the grammar in section 2 of RFC 2047, but the "encoding"
+ * must be B or Q. Also, we don't require the encoded word to be
+ * separated by linear-white-space (section 5(1)).
+ */
+static const char *find_encoded_word (const char *s, const char **x)
+{
+  const char *p, *q;
+
+  q = s;
+  while ((p = strstr (q, "=?")))
+  {
+    for (q = p + 2;
+	 0x20 < *q && *q < 0x7f && !strchr ("()<>@,;:\"/[]?.=", *q);
+	 q++)
+      ;
+    if (q[0] != '?' || !strchr ("BbQq", q[1]) || q[2] != '?')
+      continue;
+    for (q = q + 3; 0x20 < *q && *q < 0x7f && *q != '?'; q++)
+      ;
+    if (q[0] != '?' || q[1] != '=')
+    {
+      --q;
+      continue;
+    }
+
+    *x = q + 2;
+    return p;
+  }
+
+  return 0;
+}
+
+/* try to decode anything that looks like a valid RFC2047 encoded
+ * header field, ignoring RFC822 parsing rules
+ */
+static void rfc2047_decode (char **pd)
+{
+  const char *p, *q;
+  size_t n;
+  int found_encoded = 0;
+  char *d0, *d;
+  const char *s = *pd;
+  size_t dlen;
+
+  if (!s || !*s)
+    return;
+
+  dlen = 4 * strlen (s); /* should be enough */
+  d = d0 = safe_malloc (dlen + 1);
+
+  while (*s && dlen > 0)
+  {
+    if (!(p = find_encoded_word (s, &q)))
+    {
+      /* no encoded words */
+      strncpy (d, s, dlen);
+      d += dlen;
+      break;
+    }
+
+    if (p != s)
+    {
+      n = (size_t) (p - s);
+      /* ignore spaces between encoded words */
+      if (!found_encoded || strspn (s, " \t\r\n") != n)
+      {
+	if (n > dlen)
+	  n = dlen;
+	memcpy (d, s, n);
+	d += n;
+	dlen -= n;
+      }
+    }
+
+    rfc2047_decode_word (d, p, dlen);
+    found_encoded = 1;
+    s = q;
+    n = mutt_strlen (d);
+    dlen -= n;
+    d += n;
+  }
+  *d = 0;
+
+  safe_free ((void **) pd);
+  *pd = d0;
+/*  mutt_str_adjust (pd);*/
+}
+
+/* 
+ * header is defined as char[ MAX_STRING ] 
+ *
+ *  this ugly function encapsulates code which was taken from mutt 1.4
+ *  and therefore uses dynamicly allocated memory
+ */
+void rfc2047_xbuffy_decode_header (char *header)
+{
+    if (header && strstr(header, "=?") != NULL) {
+			char *tmp_buf = safe_malloc(strlen(header) + 1);
+			strcpy(tmp_buf, header);
+      rfc2047_decode (&tmp_buf);
+			strncpy(header, tmp_buf, MAX_STRING); /* long header? */
+			header[MAX_STRING - 1] = '\0';
+			safe_free((void **) &tmp_buf);
+		}
+}
diff -rNu xbuffy-3.3.bl.3.orig/rfc2047_header.h xbuffy-3.3.bl.3/rfc2047_header.h
--- xbuffy-3.3.bl.3.orig/rfc2047_header.h	Thu Jan  1 01:00:00 1970
+++ xbuffy-3.3.bl.3/rfc2047_header.h	Thu May 15 14:12:24 2003
@@ -0,0 +1,6 @@
+#ifndef __RFC2047_HEADER_H__
+#define __RFC2047_HEADER_H__  
+
+void rfc2047_xbuffy_decode_header (char *header);
+
+#endif
diff -rNu xbuffy-3.3.bl.3.orig/xbuffy.c xbuffy-3.3.bl.3/xbuffy.c
--- xbuffy-3.3.bl.3.orig/xbuffy.c	Wed Jul  1 12:53:44 1998
+++ xbuffy-3.3.bl.3/xbuffy.c	Thu May 15 14:12:53 2003
@@ -76,6 +76,9 @@
 #endif
 
 
+#include "rfc2047_header.h"
+ 
+
 
 void CheckBox();
 void TimerBreakPopup();
@@ -789,11 +792,15 @@
                     count++;
                     if (headerString != NULL)
                     {
-                        if (NEWstrlen(From) != 0)
+                        if (NEWstrlen(From) != 0) {
+														rfc2047_xbuffy_decode_header(From);
                             DynInsert(headerString, ((DynHigh(headerString) > 0) ? (DynSize(headerString)) : 0), From, NEWstrlen(From));
+												}
 
-                        if (NEWstrlen(Subject) != 0)
+                        if (NEWstrlen(Subject) != 0) {
+														rfc2047_xbuffy_decode_header(Subject);
                             DynInsert(headerString, ((DynHigh(headerString) > 0) ? (DynSize(headerString)) : 0), Subject, NEWstrlen(Subject));
+												}	
                     }
                 }
                 From[0] = Subject[0] = '\0';
@@ -894,15 +901,19 @@
 		  status == NEW_MSG))
 	      {
 		if (mailBox->type == MHDIR) count++;
-		if (strlen(From) != 0)
+		if (strlen(From) != 0) {
+		  rfc2047_xbuffy_decode_header(From);
 		  DynInsert(headerString, 
 		    ((DynHigh(headerString) > 0) ? (DynSize(headerString)) : 0),
 		    From, strlen(From));
+		}	
 
-		if (strlen(Subject) != 0)
+		if (strlen(Subject) != 0) {
+		  rfc2047_xbuffy_decode_header(Subject);
 		  DynInsert(headerString, 
 		    ((DynHigh(headerString) > 0) ? (DynSize(headerString)) : 0),
 		    Subject, strlen(Subject));
+		}
 		found = TRUE;
 	      }
 	    }
